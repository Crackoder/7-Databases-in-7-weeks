1. Create a rule that captures DELETEs on venues, and instead sets the active flag (created in Day 1 homework) to FALSE.

CREATE RULE deactivate_venues as on delete to venues do instead update venues set active = FALSE where venue_id = old.venue_id;

2. A temporary table was not the best way to implement our event calendar pivot table. The generate_series(a, b) function returns a set of records, from a to b. Replace the month_count table select with this.

SELECT * FROM crosstab(
  'SELECT extract(year from starts) as year,
  extract(month from starts) as month, count(*) FROM events
  GROUP BY year, month',
    'select * from generate_series(1,12)'
) AS (
  year int,
  jan int, feb int, mar int, apr int, may int, jun int, jul int, aug int, sep int, oct int, nov int, dec int
) ORDER BY YEAR;

3. Build a pivot table that displays every day in a single month, where each week of the month is a row, and each day name forms a column across the top (seven days, starting with Sunday and ending with Saturday) like a standard month calendar. Each day should contain a count of the number of events that date, or remain blank if no event occurs.

select * from crosstab(
   'select extract(week from generate_series::date) as week, NULL as dow, NULL as count
      from generate_series(''2012-07-01'', ''2012-07-31'', interval ''1 week'')
   UNION
   select extract(week from starts::date) as week,
   extract(dow from starts::date) as dow, count(*)
   from events group by starts::date, ends::date
   having (starts::date,ends::date) overlaps (DATE ''2012-07-01'', DATE ''2012-07-31'') order by week',
  'select * from generate_series(0,6)'
) as (
  week int, sun int, mon int, tue int, wed int, thu int, fri int, sat int
) order by week;